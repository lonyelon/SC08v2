;;                                                                           NOI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;NAN.noa	;; Add RAM[ADR] to DTA
NOI.noa	0	ALU E,DTA S,PRC I
NOI.noa	1	ROM E,INS S

;;NAN.num	;; Add ROM to DTA
NOI.num	0	ROM E,AUX S
NOI.num	1	ALU E,DTA S,PRC I
NOI.num	2	ROM E,INS S

;;NAN.ram	;; Add RAM[#1] to DTA
NOI.ram	0	ROM E,ADR S
NOI.ram	1	RAM E,AUX S
NOI.ram	2	ALU E,DTA S,PRC I
NOI.ram	3	ROM E,INS S

;;NAN.rom	;; ERROR: Too many steps

;;NAN.ptr	;; Add RAM[RAM[DTA]] to DTA
NOI.ptr	0	RAM E,ADR S
NOI.ptr	1	RAM E,AUX S
NOI.ptr	2	ALU E,DTA S,PRC I
NOI.ptr	3	ROM E,PRC S

;;NAN.prr	;; Add RAM[RAM[#1]] to DTA
NOI.prr	0	ROM E,ADR S
NOI.prr	1	RAM E,ADR S
NOI.prr	2	RAM E,AUX S
NOI.prr	3	ALU E,DTA S,PRC I
NOI.prr	4	ROM E,PRC S

;;NAN.inp	;; Add INP to DTA
NOI.inp	0	ALU E,DTA S,PRC I
NOI.inp	1	ROM E,PRC S

;;NAN.out	;; ERROR: Input from output

;;                                                                           JUM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;JUM.noa	;; Jump to ROM[AUX][RAM[ADR]]
JUM.noa	0	PRC S
JUM.noa	1	ROM E,INS S

;;JUM.num	;; Jump to ROM[#1][#2]
JUM.num	0	ROM E,AUX S
JUM.num	1	PRC I
JUM.num	2	ROM E,ADR S
JUM.num	3	PRC I
JUM.num	4	PRC S
JUM.num	5	ROM E,ADR S

;;JUM.ram	;; Jump to ROM[AUX][RAM[#1]]; Same as JUM.prr
JUM.ram	0	ROM E,ADR S
JUM.ram	1	RAM E,ADR S,PRC I
JUM.ram	2	PRC S
JUM.ram	3	ROM E,INS S

;;JUM.rom	;; INVALID: 5 byte operation

;;JUM.ptr	;; Jump to ROM[AUX][RAM[DTA]]
JUM.ptr	0	RAM E,ADR S,PRC I
JUM.ptr	1	PRC S
JUM.ptr	2	ROM E,INS S

;;JUM.prr	;; Jump to ROM[AUX][RAM[#1]]; Same as JUM.ram
JUM.prr	0	ROM E,ADR S
JUM.prr	1	RAM E,ADR S,PRC I
JUM.prr	2	PRC S
JUM.prr	3	ROM E,INS S

;;JUM.inp	;; Jumps to ROM[AUX][INP]
JUM.inp	0	PRC S
JUM.inp	1	ROM E,INS S

;;JUM.out	;; INVALID: Cannot read from out registry

;;                                                                           LDD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;LDD.noa	;; DTA = RAM[ADR]
LDD.noa	0	ROM E,INS S

;;LDD.num	;; DTA = ROM[#1][#2]
LDD.num	0	ROM E,DTA S,PRC I
LDD.num	1	ROM E,INS S

;;LDD.ram	;; DTA = RAM[#1]
LDD.ram	0	ROM E,ADR S
LDD.ram	1	RAM E,DTA S,PRC I
LDD.ram	2	ROM E,INS S

;;LDD.rom	;; DTA = ROM[#1][#2]
LDD.rom	0	ROM E,AUX S
LDD.rom	1	PRC I
LDD.rom	2	ROM E,ADR S
LDD.rom	3	SWT
LDD.rom	4	ROM E,DTA S,PRC I
LDD.rom	5	SWT
LDD.rom	6	ROM E,INS S

;;LDD.ptr	;; DTA = RAM[DTA]
LDD.ptr	0	RAM E,DTA S,PRC I
LDD.ptr	1	ROM E,INS S

;;LDD.prr	;; DTA = RAM[#1]
LDD.prr	0	ROM E,ADR S
LDD.prr	1	RAM E,ADR S
LDD.prr	2	RAM E,DTA S,PRC I
LDD.prr	3	ROM E,INS S

;;LDD.inp	;; DTA = INP
LDD.inp	0	ROM E,INS S

;;LDD.out	;; INVALID: Cannot read from out registry

;;                                                                           STD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;STD.noa	;; RAM[ADR] = DTA
STD.noa	0	ROM E,INS S

;;STD.num	;; INVALID: Cannot store to a number

;;STD.ram	;; RAM[#1] = DTA
STD.ram	0	ROM E,ADR S
STD.ram	1	ALU E,RAM S,PRC I
STD.ram	2	ROM E,INS S

;;STD.rom	;; ROM[#1][#2] = DTA
STD.rom	0	ROM E,AUX S
STD.rom	1	PRC I
STD.rom	2	ROM E,ADR S
STD.rom	3	SWT
STD.rom	4	ALU E,ROM S
STD.rom	5	PRC I,SWT
STD.rom	6	ROM E,INS S

;;STD.ptr	;; Store DTA to RAM[DTA]
STD.ptr	0	ALU E,RAM S,PRC I
STD.ptr	1	ROM E,INS S

;;STD.prr	;; Store DTA to RAM[#1]
STD.prr	0	ROM E,ADR S
STD.prr	1	RAM E,ADR S
STD.prr	2	ALU E,RAM S,PRC I
STD.prr	3	ROM E,INS S

;;STD.inp	;; INVALID: Cannot write to the inp registry

;;STD.out	;; OUT = DTA
STD.out	0	ROM E,INS S

;;                                                                           LDA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;LDA.noa	;; AUX = RAM[ADR]
LDA.noa	0	ROM E,INS S

;;LDA.num	;; AUX = ROM[#1][#2]
LDA.num	0	ROM E,AUX S,PRC I
LDA.num	1	ROM E,INS S

;;LDA.ram	;; AUX = RAM[#1]
LDA.ram	0	ROM E,ADR S
LDA.ram	1	RAM E,AUX S,PRC I
LDA.ram	2	ROM E,INS S

;;LDA.rom	;; AUX = ROM[#1][#2]
LDA.rom	0	ROM E,AUX S
LDA.rom	1	PRC I
LDA.rom	2	ROM E,ADR S
LDA.rom	3	SWT
LDA.rom	4	ROM E,AUX S,PRC I
LDA.rom	5	SWT
LDA.rom	6	ROM E,INS S

;;LDA.ptr	;; Get data from RAM[AUX] to DTA ??
LDA.ptr	0	RAM E,AUX S,PRC I
LDA.ptr	1	ROM E,INS S

;;LDA.prr	;; AUX = RAM[#1]
LDA.prr	0	ROM E,ADR S
LDA.prr	1	RAM E,ADR S
LDA.prr	2	RAM E,AUX S,PRC I
LDA.prr	3	ROM E,INS S

;;LDA.inp	;; AUX = INP
LDA.inp	0	ROM E,INS S

;;LDA.out	;; ERROR: Cannot read from out registry

;;                                                                           STA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;STA.noa	;; RAM[ADR] = AUX
STA.noa	0	ROM E,INS S

;;STA.num	;; INVALID: Cannot store to a number

;;STA.rom	;; ROM[#1][#2] = AUX
STA.rom	0	ROM E,AUX S
STA.rom	1	PRC I
STA.rom	2	ROM E,ADR S
STA.rom	3	SWT
STA.rom	4	ALU E,ROM S
STA.rom	5	PRC I,SWT
STA.rom	6	ROM E,INS S

;;STA.ptr	;; RAM[DTA] = AUX
STA.ptr	0	ALU E,RAM S,PRC I
STA.ptr	1	ROM E,INS S

;;STA.prr	;; INVALID: Chicken-egg situation

;;STA.inp	;; INVALID: Cannot store data to inp registry

;;STA.out	;; OUT = AUX
STA.out	0	ROM E,INS S

;;                                                                           ADD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;ADD.noa	;; DTA += RAM[ADR]
ADD.noa	0	ALU E,DTA S,PRC I
ADD.noa	1	ROM E,INS S

;;ADD.num	;; DTA += #1
ADD.num	0	ROM E,AUX S
ADD.num	1	ALU E,DTA S,PRC I
ADD.num	2	ROM E,INS S

;;ADD.ram	;; DTA += RAM[#1]
ADD.ram	0	ROM E,ADR S
ADD.ram	1	RAM E,AUX S
ADD.ram	2	ALU E,DTA S,PRC I
ADD.ram	3	ROM E,INS S

;;ADD.rom	;; INVALID: Too many microinstructions

;;ADD.ptr	;; DTA += RAM[RAM[DTA]]
ADD.ptr	0	RAM E,ADR S
ADD.ptr	1	RAM E,AUX S
ADD.ptr	2	ALU E,DTA S,PRC I
ADD.ptr	3	ROM E,PRC S

;;ADD.prr	;; Add RAM[RAM[#1]] to DTA
ADD.prr	0	ROM E,ADR S
ADD.prr	1	RAM E,ADR S
ADD.prr	2	RAM E,AUX S
ADD.prr	3	ALU E,DTA S,PRC I
ADD.prr	4	ROM E,PRC S

;;ADD.inp	;; Add INP to DTA
ADD.inp	0	ALU E,DTA S,PRC I
ADD.inp	1	ROM E,PRC S

;;ADD.out	;; ERROR: Input from output

;;                                                                           SUB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;SUB.noa	;; Add RAM[ADR] to DTA
SUB.noa	0	ALU E,DTA S,PRC I
SUB.noa	1	ROM E,INS S

;;SUB.num	;; Add ROM to DTA
SUB.num	0	ROM E,AUX S
SUB.num	1	ALU E,DTA S,PRC I
SUB.num	2	ROM E,INS S

;;SUB.ram	;; Add RAM[#1] to DTA
SUB.ram	0	ROM E,ADR S
SUB.ram	1	RAM E,AUX S
SUB.ram	2	ALU E,DTA S,PRC I
SUB.ram	3	ROM E,INS S

;;SUB.rom	;; ERROR: Too many steps

;;SUB.ptr	;; Add RAM[RAM[DTA]] to DTA
SUB.ptr	0	RAM E,ADR S
SUB.ptr	1	RAM E,AUX S
SUB.ptr	2	ALU E,DTA S,PRC I
SUB.ptr	3	ROM E,PRC S

;;SUB.prr	;; Add RAM[RAM[#1]] to DTA
SUB.prr	0	ROM E,ADR S
SUB.prr	1	RAM E,ADR S
SUB.prr	2	RAM E,AUX S
SUB.prr	3	ALU E,DTA S,PRC I
SUB.prr	4	ROM E,PRC S

;;SUB.inp	;; Add INP to DTA
SUB.inp	0	ALU E,DTA S,PRC I
SUB.inp	1	ROM E,PRC S

;;SUB.out	;; ERROR: Input from output

;;                                                                           SHL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;SHL.noa	;; Add RAM[ADR] to DTA
SHL.noa	0	ALU E,DTA S,PRC I
SHL.noa	1	ROM E,INS S

;;SHL.num	;; Add ROM to DTA
SHL.num	0	ROM E,AUX S
SHL.num	1	ALU E,DTA S,PRC I
SHL.num	2	ROM E,INS S

;;SHL.ram	;; Add RAM[#1] to DTA
SHL.ram	0	ROM E,ADR S
SHL.ram	1	RAM E,AUX S
SHL.ram	2	ALU E,DTA S,PRC I
SHL.ram	3	ROM E,INS S

;;SHL.rom	;; ERROR: Too many steps

;;SHL.ptr	;; Add RAM[RAM[DTA]] to DTA
SHL.ptr	0	RAM E,ADR S
SHL.ptr	1	RAM E,AUX S
SHL.ptr	2	ALU E,DTA S,PRC I
SHL.ptr	3	ROM E,PRC S

;;SHL.prr	;; Add RAM[RAM[#1]] to DTA
SHL.prr	0	ROM E,ADR S
SHL.prr	1	RAM E,ADR S
SHL.prr	2	RAM E,AUX S
SHL.prr	3	ALU E,DTA S,PRC I
SHL.prr	4	ROM E,PRC S

;;SHL.inp	;; Add INP to DTA
SHL.inp	0	ALU E,DTA S,PRC I
SHL.inp	1	ROM E,PRC S

;;SHL.out	;; ERROR: Input from output

;;                                                                           SHR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;SHR.noa	;; Add RAM[ADR] to DTA
SHR.noa	0	ALU E,DTA S,PRC I
SHR.noa	1	ROM E,INS S

;;SHR.num	;; Add ROM to DTA
SHR.num	0	ROM E,AUX S
SHR.num	1	ALU E,DTA S,PRC I
SHR.num	2	ROM E,INS S

;;SHR.ram	;; Add RAM[#1] to DTA
SHR.ram	0	ROM E,ADR S
SHR.ram	1	RAM E,AUX S
SHR.ram	2	ALU E,DTA S,PRC I
SHR.ram	3	ROM E,INS S

;;SHR.rom	;; ERROR: Too many steps

;;SHR.ptr	;; Add RAM[RAM[DTA]] to DTA
SHR.ptr	0	RAM E,ADR S
SHR.ptr	1	RAM E,AUX S
SHR.ptr	2	ALU E,DTA S,PRC I
SHR.ptr	3	ROM E,PRC S

;;SHR.prr	;; Add RAM[RAM[#1]] to DTA
SHR.prr	0	ROM E,ADR S
SHR.prr	1	RAM E,ADR S
SHR.prr	2	RAM E,AUX S
SHR.prr	3	ALU E,DTA S,PRC I
SHR.prr	4	ROM E,PRC S

;;SHR.inp	;; Add INP to DTA
SHR.inp	0	ALU E,DTA S,PRC I
SHR.inp	1	ROM E,PRC S

;;SHR.out	;; ERROR: Input from output

;;                                                                           EQU
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;EQU.noa	;; Add RAM[ADR] to DTA
EQU.noa	0	ALU E,DTA S,PRC I
EQU.noa	1	ROM E,INS S

;;EQU.num	;; Add ROM to DTA
EQU.num	0	ROM E,AUX S
EQU.num	1	ALU E,DTA S,PRC I
EQU.num	2	ROM E,INS S

;;EQU.ram	;; Add RAM[#1] to DTA
EQU.ram	0	ROM E,ADR S
EQU.ram	1	RAM E,AUX S
EQU.ram	2	ALU E,DTA S,PRC I
EQU.ram	3	ROM E,INS S

;;EQU.rom	;; ERROR: Too many steps

;;EQU.ptr	;; Add RAM[RAM[DTA]] to DTA
EQU.ptr	0	RAM E,ADR S
EQU.ptr	1	RAM E,AUX S
EQU.ptr	2	ALU E,DTA S,PRC I
EQU.ptr	3	ROM E,PRC S

;;EQU.prr	;; Add RAM[RAM[#1]] to DTA
EQU.prr	0	ROM E,ADR S
EQU.prr	1	RAM E,ADR S
EQU.prr	2	RAM E,AUX S
EQU.prr	3	ALU E,DTA S,PRC I
EQU.prr	4	ROM E,PRC S

;;EQU.inp	;; Add INP to DTA
EQU.inp	0	ALU E,DTA S,PRC I
EQU.inp	1	ROM E,PRC S

;;EQU.out	;; ERROR: Input from output

;;                                                                           GRE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;GRE.noa	;; DTA > RAM[ADR]
GRE.noa	0	ALU E,DTA S,PRC I
GRE.noa	1	ROM E,INS S

;;GRE.num	;; DTA > #1
GRE.num	0	ROM E,AUX S
GRE.num	1	ALU E,DTA S,PRC I
GRE.num	2	ROM E,INS S

;;GRE.ram	;; DTA > RAM[#1]
GRE.ram	0	ROM E,ADR S
GRE.ram	1	RAM E,AUX S
GRE.ram	2	ALU E,DTA S,PRC I
GRE.ram	3	ROM E,INS S

;;GRE.rom	;; INVALID: Too many steps

;;GRE.ptr	;; DTA > RAM[RAM[DTA]] ??
GRE.ptr	0	RAM E,ADR S
GRE.ptr	1	RAM E,AUX S
GRE.ptr	2	ALU E,DTA S,PRC I
GRE.ptr	3	ROM E,PRC S

;;GRE.prr	;; DTA > RAM[RAM[#1]]
GRE.prr	0	ROM E,ADR S
GRE.prr	1	RAM E,ADR S
GRE.prr	2	RAM E,AUX S
GRE.prr	3	ALU E,DTA S,PRC I
GRE.prr	4	ROM E,PRC S

;;GRE.inp	;; DTA > INP
GRE.inp	0	ALU E,DTA S,PRC I
GRE.inp	1	ROM E,PRC S

;;GRE.out	;; INVALID: Cannot read form OUT registry
